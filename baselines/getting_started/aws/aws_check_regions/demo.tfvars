# List of services and resources to be Check: Approved.
# Started with a few resource types to get started aligned with the initial mods installed
# You can remove the comment per row to include the resource type.  Make sure you have the related service mod installed

# Acceptable Values:
# "Skip"
# "Check: Approved"
# "Enforce: Delete unapproved if new"

resource_approved_regions = {
    # aws-acm-certificate                           = "Check: Approved"
    # aws-mq-broker                                 = "Check: Approved"
    # aws-mq-configuration                          = "Check: Approved"
    # aws-amplify-app                               = "Check: Approved"
    # aws-apigateway-api                            = "Check: Approved"
    # aws-apigateway-apiKey                         = "Check: Approved"
    # aws-apigateway-apiV2                          = "Check: Approved"
    # aws-apigateway-authorizer                     = "Check: Approved"
    # aws-apigateway-authorizerV2                   = "Check: Approved"
    # aws-apigateway-domainNameV2                   = "Check: Approved"
    # aws-apigateway-stage                          = "Check: Approved"
    # aws-apigateway-stageV2                        = "Check: Approved"
    # aws-apigateway-usagePlan                      = "Check: Approved"
    # aws-appmesh-mesh                              = "Check: Approved"
    # aws-athena-namedQuery                         = "Check: Approved"
    # aws-athena-workgroup                          = "Check: Approved"
    # aws-backup-backupPlan                         = "Check: Approved"
    # aws-backup-backupVault                        = "Check: Approved"
    # aws-batch-jobDefinition                       = "Check: Approved"
    # aws-cloudformation-stack                      = "Check: Approved"
    # aws-cloudformation-stackSet                   = "Check: Approved"
    # aws-cloudsearch-domain                        = "Check: Approved"
    # aws-cloudtrail-trail                          = "Check: Approved"
    # aws-cloudwatch-alarm                          = "Check: Approved"
    # aws-codebuild-build                           = "Check: Approved"
    # aws-codebuild-project                         = "Check: Approved"
    # aws-codecommit-repository                     = "Check: Approved"
    # aws-config-configurationRecorder              = "Check: Approved"
    # aws-config-deliveryChannel                    = "Check: Approved"
    # aws-config-rule                               = "Check: Approved"
    # aws-dax-cluster                               = "Check: Approved"
    # aws-directoryservice-directory                = "Check: Approved"
    # aws-dms-endpoint                              = "Check: Approved"
    # aws-docdb-dbCluster                           = "Check: Approved"
    # aws-docdb-dbClusterParameterGroup             = "Check: Approved"
    # aws-docdb-dbInstance                          = "Check: Approved"
    # aws-dynamodb-backup                           = "Check: Approved"
    # aws-dynamodb-table                            = "Check: Approved"
    aws-ec2-ami                                   = "Check: Approved"
    aws-ec2-applicationLoadBalancer               = "Check: Approved"
    # aws-ec2-autoScalingGroup                      = "Check: Approved"
    aws-ec2-classicLoadBalancer                   = "Check: Approved"
    aws-ec2-instance                              = "Check: Approved"
    aws-ec2-keyPair                               = "Check: Approved"
    # aws-ec2-launchConfiguration                   = "Check: Approved"
    # aws-ec2-launchTemplate                        = "Check: Approved"
    # aws-ec2-launchTemplateVersion                 = "Check: Approved"
    # aws-ec2-listenerRule                          = "Check: Approved"
    # aws-ec2-loadBalancerListener                  = "Check: Approved"
    # aws-ec2-networkInterface                      = "Check: Approved"
    aws-ec2-networkLoadBalancer                   = "Check: Approved"
    aws-ec2-snapshot                              = "Check: Approved"
    # aws-ec2-targetGroup                           = "Check: Approved"
    aws-ec2-volume                                = "Check: Approved"
    # aws-ecr-repository                            = "Check: Approved"
    # aws-ecs-cluster                               = "Check: Approved"
    # aws-ecs-containerInstance                     = "Check: Approved"
    # aws-ecs-taskDefinition                        = "Check: Approved"
    # aws-efs-fileSystem                            = "Check: Approved"
    # aws-efs-mountTarget                           = "Check: Approved"
    # aws-eks-cluster                               = "Check: Approved"
    # aws-eks-nodeGroup                             = "Check: Approved"
    # aws-elasticbeanstalk-application              = "Check: Approved"
    # aws-elasticbeanstalk-environment              = "Check: Approved"
    # aws-elasticache-cacheCluster                  = "Check: Approved"
    # aws-elasticache-cacheParameterGroup           = "Check: Approved"
    # aws-elasticache-replicationGroup              = "Check: Approved"
    # aws-elasticache-snapshot                      = "Check: Approved"
    # aws-elasticsearch-domain                      = "Check: Approved"
    # aws-emr-cluster                               = "Check: Approved"
    # aws-emr-securityConfiguration                 = "Check: Approved"
    # aws-events-rule                               = "Check: Approved"
    # aws-events-target                             = "Check: Approved"
    # aws-fsx-backup                                = "Check: Approved"
    # aws-fsx-fileSystem                            = "Check: Approved"
    # aws-glacier-vault                             = "Check: Approved"
    # aws-glue-database                             = "Check: Approved"
    # aws-guardduty-detector                        = "Check: Approved"
    # aws-guardduty-ipSet                           = "Check: Approved"
    # aws-guardduty-threatIntelSet                  = "Check: Approved"
    # aws-inspector-assessmentTarget                = "Check: Approved"
    # aws-inspector-assessmentTemplate              = "Check: Approved"
    # aws-kinesis-consumer                          = "Check: Approved"
    # aws-kinesis-stream                            = "Check: Approved"
    # aws-kms-key                                   = "Check: Approved"
    aws-lambda-function                           = "Check: Approved"
    # aws-logs-logGroup                             = "Check: Approved"
    # aws-logs-logStream                            = "Check: Approved"
    # aws-logs-metricFilter                         = "Check: Approved"
    # aws-msk-cluster                               = "Check: Approved"
    # aws-neptune-dbCluster                         = "Check: Approved"
    # aws-neptune-dbInstance                        = "Check: Approved"
    # aws-qldb-ledger                               = "Check: Approved"
    # aws-rds-dbCluster                             = "Check: Approved"
    # aws-rds-dbClusterParameterGroup               = "Check: Approved"
    # aws-rds-dbClusterSnapshotManual               = "Check: Approved"
    # aws-rds-dbInstance                            = "Check: Approved"
    # aws-rds-dbParameterGroup                      = "Check: Approved"
    # aws-rds-dbSnapshotManual                      = "Check: Approved"
    # aws-rds-optionGroup                           = "Check: Approved"
    # aws-rds-subnetGroup                           = "Check: Approved"
    # aws-redshift-cluster                          = "Check: Approved"
    # aws-redshift-clusterParameterGroup            = "Check: Approved"
    # aws-redshift-clusterSubnetGroup               = "Check: Approved"
    # aws-redshift-clusterSnapshotManual            = "Check: Approved"
    # aws-robomaker-fleet                           = "Check: Approved"
    # aws-robomaker-robot                           = "Check: Approved"
    # aws-robomaker-robotApplication                = "Check: Approved"
    # aws-route53resolver-resolverEndpoint          = "Check: Approved"
    # aws-route53resolver-resolverRule              = "Check: Approved"
    aws-s3-bucket                                 = "Check: Approved"
    # aws-secretsmanager-secret                     = "Check: Approved"
    # aws-securityhub-hub                           = "Check: Approved"
    # aws-sns-subscription                          = "Check: Approved"
    # aws-sns-topic                                 = "Check: Approved"
    # aws-sqs-queue                                 = "Check: Approved"
    # aws-ssm-association                           = "Check: Approved"
    # aws-ssm-document                              = "Check: Approved"
    # aws-ssm-maintenanceWindow                     = "Check: Approved"
    # aws-ssm-ssmParameter                          = "Check: Approved"
    # aws-stepfunctions-stateMachine                = "Check: Approved"
    # aws-swf-domain                                = "Check: Approved"
    # aws-vpc-connect-customerGateway               = "Check: Approved"
    # aws-vpc-core-dhcpOptions                      = "Check: Approved"
    # aws-vpc-internet-egressOnlyInternetGateway    = "Check: Approved"
    # aws-vpc-internet-elasticIp                    = "Check: Approved"
    # aws-vpc-internet-vpcEndpoint                  = "Check: Approved"
    # aws-vpc-internet-vpcEndpointService           = "Check: Approved"
    # aws-vpc-security-flowLog                      = "Check: Approved"
    # aws-vpc-internet-internetGateway              = "Check: Approved"
    # aws-vpc-internet-natGateway                   = "Check: Approved"
    # aws-vpc-security-networkAcl                   = "Check: Approved"
    # aws-vpc-connect-vpcPeeringConnection          = "Check: Approved"
    # aws-vpc-core-routeTable                       = "Check: Approved"
    aws-vpc-security-securityGroup                = "Check: Approved"
    # aws-vpc-core-subnet                           = "Check: Approved"
    # aws-vpc-connect-transitGateway                = "Check: Approved"
    # aws-vpc-connect-transitGatewayRouteTable      = "Check: Approved"
    aws-vpc-core-vpc                              = "Check: Approved"
    # aws-vpc-connect-vpnConnection                 = "Check: Approved"
    # aws-vpc-connect-vpnGateway                    = "Check: Approved"
    # aws-waf-ipSetV2Regional                       = "Check: Approved"
    # aws-waf-regexPatternSetV2Regional             = "Check: Approved"
    # aws-waf-ruleGroupV2Regional                   = "Check: Approved"
    # aws-waf-webAclV2Regional                      = "Check: Approved"
    # aws-wafregional-rule                          = "Check: Approved"
    # aws-wellarchitected-workload                  = "Check: Approved"
}

# Mapping of resource name to resource policy
# Note: the resource map above dictates the applicable use of each line item below.  You do not need to comment out these items to reduce scope
policy_map  = {
 aws-acm-certificate                           = "tmod:@turbot/aws-acm#/policy/types/certificateApproved"
 aws-mq-broker                                 = "tmod:@turbot/aws-mq#/policy/types/brokerApproved"
 aws-mq-configuration                          = "tmod:@turbot/aws-mq#/policy/types/configurationApproved"
 aws-amplify-app                               = "tmod:@turbot/aws-amplify#/policy/types/appApproved"
 aws-apigateway-api                            = "tmod:@turbot/aws-apigateway#/policy/types/apiApproved"
 aws-apigateway-apiKey                         = "tmod:@turbot/aws-apigateway#/policy/types/apiKeyApproved"
 aws-apigateway-apiV2                          = "tmod:@turbot/aws-apigateway#/policy/types/apiV2Approved"
 aws-apigateway-authorizer                     = "tmod:@turbot/aws-apigateway#/policy/types/authorizerApproved"
 aws-apigateway-authorizerV2                   = "tmod:@turbot/aws-apigateway#/policy/types/authorizerV2Approved"
 aws-apigateway-domainNameV2                   = "tmod:@turbot/aws-apigateway#/policy/types/domainNameV2Approved"
 aws-apigateway-stage                          = "tmod:@turbot/aws-apigateway#/policy/types/stageApproved"
 aws-apigateway-stageV2                        = "tmod:@turbot/aws-apigateway#/policy/types/stageV2Approved"
 aws-apigateway-usagePlan                      = "tmod:@turbot/aws-apigateway#/policy/types/usagePlanApproved"
 aws-appmesh-mesh                              = "tmod:@turbot/aws-appmesh#/policy/types/meshApproved"
 aws-athena-namedQuery                         = "tmod:@turbot/aws-athena#/policy/types/namedQueryApproved"
 aws-athena-workgroup                          = "tmod:@turbot/aws-athena#/policy/types/workgroupApproved"
 aws-backup-backupPlan                         = "tmod:@turbot/aws-backup#/policy/types/backupPlanApproved"
 aws-backup-backupVault                        = "tmod:@turbot/aws-backup#/policy/types/backupVaultApproved"
 aws-batch-jobDefinition                       = "tmod:@turbot/aws-batch#/policy/types/jobDefinitionApproved"
 aws-cloudformation-stack                      = "tmod:@turbot/aws-cloudformation#/policy/types/stackApproved"
 aws-cloudformation-stackSet                   = "tmod:@turbot/aws-cloudformation#/policy/types/stackSetApproved"
 aws-cloudsearch-domain                        = "tmod:@turbot/aws-cloudsearch#/policy/types/domainApproved"
 aws-cloudtrail-trail                          = "tmod:@turbot/aws-cloudtrail#/policy/types/trailApproved"
 aws-cloudwatch-alarm                          = "tmod:@turbot/aws-cloudwatch#/policy/types/alarmApproved"
 aws-codebuild-build                           = "tmod:@turbot/aws-codebuild#/policy/types/buildApproved"
 aws-codebuild-project                         = "tmod:@turbot/aws-codebuild#/policy/types/projectApproved"
 aws-codecommit-repository                     = "tmod:@turbot/aws-codecommit#/policy/types/repositoryApproved"
 aws-config-configurationRecorder              = "tmod:@turbot/aws-config#/policy/types/configurationRecorderApproved"
 aws-config-deliveryChannel                    = "tmod:@turbot/aws-config#/policy/types/deliveryChannelApproved"
 aws-config-rule                               = "tmod:@turbot/aws-config#/policy/types/ruleApproved"
 aws-dax-cluster                               = "tmod:@turbot/aws-dax#/policy/types/clusterApproved"
 aws-directoryservice-directory                = "tmod:@turbot/aws-directoryservice#/policy/types/directoryApproved"
 aws-dms-endpoint                              = "tmod:@turbot/aws-dms#/policy/types/endpointApproved"
 aws-docdb-dbCluster                           = "tmod:@turbot/aws-docdb#/policy/types/dbClusterApproved"
 aws-docdb-dbClusterParameterGroup             = "tmod:@turbot/aws-docdb#/policy/types/dbClusterParameterGroupApproved"
 aws-docdb-dbInstance                          = "tmod:@turbot/aws-docdb#/policy/types/dbInstanceApproved"
 aws-dynamodb-backup                           = "tmod:@turbot/aws-dynamodb#/policy/types/backupApproved"
 aws-dynamodb-table                            = "tmod:@turbot/aws-dynamodb#/policy/types/tableApproved"
 aws-ec2-ami                                   = "tmod:@turbot/aws-ec2#/policy/types/amiApproved"
 aws-ec2-applicationLoadBalancer               = "tmod:@turbot/aws-ec2#/policy/types/applicationLoadBalancerApproved"
 aws-ec2-autoScalingGroup                      = "tmod:@turbot/aws-ec2#/policy/types/autoScalingGroupApproved"
 aws-ec2-classicLoadBalancer                   = "tmod:@turbot/aws-ec2#/policy/types/classicLoadBalancerApproved"
 aws-ec2-instance                              = "tmod:@turbot/aws-ec2#/policy/types/instanceApproved"
 aws-ec2-keyPair                               = "tmod:@turbot/aws-ec2#/policy/types/keyPairApproved"
 aws-ec2-launchConfiguration                   = "tmod:@turbot/aws-ec2#/policy/types/launchConfigurationApproved"
 aws-ec2-launchTemplate                        = "tmod:@turbot/aws-ec2#/policy/types/launchTemplateApproved"
 aws-ec2-launchTemplateVersion                 = "tmod:@turbot/aws-ec2#/policy/types/launchTemplateVersionApproved"
 aws-ec2-listenerRule                          = "tmod:@turbot/aws-ec2#/policy/types/listenerRuleApproved"
 aws-ec2-loadBalancerListener                  = "tmod:@turbot/aws-ec2#/policy/types/loadBalancerListenerApproved"
 aws-ec2-networkInterface                      = "tmod:@turbot/aws-ec2#/policy/types/networkInterfaceApproved"
 aws-ec2-networkLoadBalancer                   = "tmod:@turbot/aws-ec2#/policy/types/networkLoadBalancerApproved"
 aws-ec2-snapshot                              = "tmod:@turbot/aws-ec2#/policy/types/snapshotApproved"
 aws-ec2-targetGroup                           = "tmod:@turbot/aws-ec2#/policy/types/targetGroupApproved"
 aws-ec2-volume                                = "tmod:@turbot/aws-ec2#/policy/types/volumeApproved"
 aws-ecr-repository                            = "tmod:@turbot/aws-ecr#/policy/types/repositoryApproved"
 aws-ecs-cluster                               = "tmod:@turbot/aws-ecs#/policy/types/clusterApproved"
 aws-ecs-containerInstance                     = "tmod:@turbot/aws-ecs#/policy/types/containerInstanceApproved"
 aws-ecs-taskDefinition                        = "tmod:@turbot/aws-ecs#/policy/types/taskDefinitionApproved"
 aws-efs-fileSystem                            = "tmod:@turbot/aws-efs#/policy/types/fileSystemApproved"
 aws-efs-mountTarget                           = "tmod:@turbot/aws-efs#/policy/types/mountTargetApproved"
 aws-eks-cluster                               = "tmod:@turbot/aws-eks#/policy/types/clusterApproved"
 aws-eks-nodeGroup                             = "tmod:@turbot/aws-eks#/policy/types/nodeGroupApproved"
 aws-elasticbeanstalk-application              = "tmod:@turbot/aws-elasticbeanstalk#/policy/types/applicationApproved"
 aws-elasticbeanstalk-environment              = "tmod:@turbot/aws-elasticbeanstalk#/policy/types/environmentApproved"
 aws-elasticache-cacheCluster                  = "tmod:@turbot/aws-elasticache#/policy/types/cacheClusterApproved"
 aws-elasticache-cacheParameterGroup           = "tmod:@turbot/aws-elasticache#/policy/types/cacheParameterGroupApproved"
 aws-elasticache-replicationGroup              = "tmod:@turbot/aws-elasticache#/policy/types/replicationGroupApproved"
 aws-elasticache-snapshot                      = "tmod:@turbot/aws-elasticache#/policy/types/snapshotApproved"
 aws-elasticsearch-domain                      = "tmod:@turbot/aws-elasticsearch#/policy/types/domainApproved"
 aws-emr-cluster                               = "tmod:@turbot/aws-emr#/policy/types/clusterApproved"
 aws-emr-securityConfiguration                 = "tmod:@turbot/aws-emr#/policy/types/securityConfigurationApproved"
 aws-events-rule                               = "tmod:@turbot/aws-events#/policy/types/ruleApproved"
 aws-events-target                             = "tmod:@turbot/aws-events#/policy/types/targetApproved"
 aws-fsx-backup                                = "tmod:@turbot/aws-fsx#/policy/types/backupApproved"
 aws-fsx-fileSystem                            = "tmod:@turbot/aws-fsx#/policy/types/fileSystemApproved"
 aws-glacier-vault                             = "tmod:@turbot/aws-glacier#/policy/types/vaultApproved"
 aws-glue-database                             = "tmod:@turbot/aws-glue#/policy/types/databaseApproved"
 aws-guardduty-detector                        = "tmod:@turbot/aws-guardduty#/policy/types/detectorApproved"
 aws-guardduty-ipSet                           = "tmod:@turbot/aws-guardduty#/policy/types/ipSetApproved"
 aws-guardduty-threatIntelSet                  = "tmod:@turbot/aws-guardduty#/policy/types/threatIntelSetApproved"
 aws-inspector-assessmentTarget                = "tmod:@turbot/aws-inspector#/policy/types/assessmentTargetApproved"
 aws-inspector-assessmentTemplate              = "tmod:@turbot/aws-inspector#/policy/types/assessmentTemplateApproved"
 aws-kinesis-consumer                          = "tmod:@turbot/aws-kinesis#/policy/types/consumerApproved"
 aws-kinesis-stream                            = "tmod:@turbot/aws-kinesis#/policy/types/streamApproved"
 aws-kms-key                                   = "tmod:@turbot/aws-kms#/policy/types/keyApproved"
 aws-lambda-function                           = "tmod:@turbot/aws-lambda#/policy/types/functionApproved"
 aws-logs-logGroup                             = "tmod:@turbot/aws-logs#/policy/types/logGroupApproved"
 aws-logs-logStream                            = "tmod:@turbot/aws-logs#/policy/types/logStreamApproved"
 aws-logs-metricFilter                         = "tmod:@turbot/aws-logs#/policy/types/metricFilterApproved"
 aws-msk-cluster                               = "tmod:@turbot/aws-msk#/policy/types/clusterApproved"
 aws-neptune-dbCluster                         = "tmod:@turbot/aws-neptune#/policy/types/dbClusterApproved"
 aws-neptune-dbInstance                        = "tmod:@turbot/aws-neptune#/policy/types/dbInstanceApproved"
 aws-qldb-ledger                               = "tmod:@turbot/aws-qldb#/policy/types/ledgerApproved"
 aws-rds-dbCluster                             = "tmod:@turbot/aws-rds#/policy/types/dbClusterApproved"
 aws-rds-dbClusterParameterGroup               = "tmod:@turbot/aws-rds#/policy/types/dbClusterParameterGroupApproved"
 aws-rds-dbClusterSnapshotManual               = "tmod:@turbot/aws-rds#/policy/types/dbClusterSnapshotManualApproved"
 aws-rds-dbInstance                            = "tmod:@turbot/aws-rds#/policy/types/dbInstanceApproved"
 aws-rds-dbParameterGroup                      = "tmod:@turbot/aws-rds#/policy/types/dbParameterGroupApproved"
 aws-rds-dbSnapshotManual                      = "tmod:@turbot/aws-rds#/policy/types/dbSnapshotManualApproved"
 aws-rds-optionGroup                           = "tmod:@turbot/aws-rds#/policy/types/optionGroupApproved"
 aws-rds-subnetGroup                           = "tmod:@turbot/aws-rds#/policy/types/subnetGroupApproved"
 aws-redshift-cluster                          = "tmod:@turbot/aws-redshift#/policy/types/clusterApproved"
 aws-redshift-clusterParameterGroup            = "tmod:@turbot/aws-redshift#/policy/types/clusterParameterGroupApproved"
 aws-redshift-clusterSubnetGroup               = "tmod:@turbot/aws-redshift#/policy/types/clusterSubnetGroupApproved"
 aws-redshift-clusterSnapshotManual            = "tmod:@turbot/aws-redshift#/policy/types/clusterSnapshotManualApproved"
 aws-robomaker-fleet                           = "tmod:@turbot/aws-robomaker#/policy/types/fleetApproved"
 aws-robomaker-robot                           = "tmod:@turbot/aws-robomaker#/policy/types/robotApproved"
 aws-robomaker-robotApplication                = "tmod:@turbot/aws-robomaker#/policy/types/robotApplicationApproved"
 aws-route53resolver-resolverEndpoint          = "tmod:@turbot/aws-route53resolver#/policy/types/resolverEndpointApproved"
 aws-route53resolver-resolverRule              = "tmod:@turbot/aws-route53resolver#/policy/types/resolverRuleApproved"
 aws-s3-bucket                                 = "tmod:@turbot/aws-s3#/policy/types/bucketApproved"
 aws-secretsmanager-secret                     = "tmod:@turbot/aws-secretsmanager#/policy/types/secretApproved"
 aws-securityhub-hub                           = "tmod:@turbot/aws-securityhub#/policy/types/hubApproved"
 aws-sns-subscription                          = "tmod:@turbot/aws-sns#/policy/types/subscriptionApproved"
 aws-sns-topic                                 = "tmod:@turbot/aws-sns#/policy/types/topicApproved"
 aws-sqs-queue                                 = "tmod:@turbot/aws-sqs#/policy/types/queueApproved"
 aws-ssm-association                           = "tmod:@turbot/aws-ssm#/policy/types/associationApproved"
 aws-ssm-document                              = "tmod:@turbot/aws-ssm#/policy/types/documentApproved"
 aws-ssm-maintenanceWindow                     = "tmod:@turbot/aws-ssm#/policy/types/maintenanceWindowApproved"
 aws-ssm-ssmParameter                          = "tmod:@turbot/aws-ssm#/policy/types/ssmParameterApproved"
 aws-stepfunctions-stateMachine                = "tmod:@turbot/aws-stepfunctions#/policy/types/stateMachineApproved"
 aws-swf-domain                                = "tmod:@turbot/aws-swf#/policy/types/domainApproved"
 aws-vpc-connect-customerGateway               = "tmod:@turbot/aws-vpc-connect#/policy/types/customerGatewayApproved"
 aws-vpc-core-dhcpOptions                      = "tmod:@turbot/aws-vpc-core#/policy/types/dhcpOptionsApproved"
 aws-vpc-internet-egressOnlyInternetGateway    = "tmod:@turbot/aws-vpc-internet#/policy/types/egressOnlyInternetGatewayApproved"
 aws-vpc-internet-elasticIp                    = "tmod:@turbot/aws-vpc-internet#/policy/types/elasticIpApproved"
 aws-vpc-internet-vpcEndpoint                  = "tmod:@turbot/aws-vpc-internet#/policy/types/vpcEndpointApproved"
 aws-vpc-internet-vpcEndpointService           = "tmod:@turbot/aws-vpc-internet#/policy/types/vpcEndpointServiceApproved"
 aws-vpc-security-flowLog                      = "tmod:@turbot/aws-vpc-security#/policy/types/flowLogApproved"
 aws-vpc-internet-internetGateway              = "tmod:@turbot/aws-vpc-internet#/policy/types/internetGatewayApproved"
 aws-vpc-internet-natGateway                   = "tmod:@turbot/aws-vpc-internet#/policy/types/natGatewayApproved"
 aws-vpc-security-networkAcl                   = "tmod:@turbot/aws-vpc-security#/policy/types/networkAclApproved"
 aws-vpc-connect-vpcPeeringConnection          = "tmod:@turbot/aws-vpc-connect#/policy/types/vpcPeeringConnectionApproved"
 aws-vpc-core-routeTable                       = "tmod:@turbot/aws-vpc-core#/policy/types/routeTableApproved"
 aws-vpc-security-securityGroup                = "tmod:@turbot/aws-vpc-security#/policy/types/securityGroupApproved"
 aws-vpc-core-subnet                           = "tmod:@turbot/aws-vpc-core#/policy/types/subnetApproved"
 aws-vpc-connect-transitGateway                = "tmod:@turbot/aws-vpc-connect#/policy/types/transitGatewayApproved"
 aws-vpc-connect-transitGatewayRouteTable      = "tmod:@turbot/aws-vpc-connect#/policy/types/transitGatewayRouteTableApproved"
 aws-vpc-core-vpc                              = "tmod:@turbot/aws-vpc-core#/policy/types/vpcApproved"
 aws-vpc-connect-vpnConnection                 = "tmod:@turbot/aws-vpc-connect#/policy/types/vpnConnectionApproved"
 aws-vpc-connect-vpnGateway                    = "tmod:@turbot/aws-vpc-connect#/policy/types/vpnGatewayApproved"
 aws-waf-ipSetV2Regional                       = "tmod:@turbot/aws-waf#/policy/types/ipSetV2RegionalApproved"
 aws-waf-regexPatternSetV2Regional             = "tmod:@turbot/aws-waf#/policy/types/regexPatternSetV2RegionalApproved"
 aws-waf-ruleGroupV2Regional                   = "tmod:@turbot/aws-waf#/policy/types/ruleGroupV2RegionalApproved"
 aws-waf-webAclV2Regional                      = "tmod:@turbot/aws-waf#/policy/types/webAclV2RegionalApproved"
 aws-wafregional-rule                          = "tmod:@turbot/aws-wafregional#/policy/types/ruleApproved"
 aws-wellarchitected-workload                  = "tmod:@turbot/aws-wellarchitected#/policy/types/workloadApproved"
}