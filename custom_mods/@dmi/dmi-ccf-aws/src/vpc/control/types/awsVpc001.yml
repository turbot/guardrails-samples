# This is a control type definition file
#
# Controls are responsible for enforcing one or more policies
# While Policies define the desired settings for Resources, Controls are responsible for implementing them
# Please refer to https://turbot.com/v5/docs/concepts/controls#control-types for details

# Here we are defining the `Dunder Mifflin > AWS > VPC > AWS.VPC.001 - Disallow access to management ports from 0.0.0.0/0
awsVpc001:

  # The control's title as it will be shown on Turbot UI console
  title: AWS.VPC.001 - Disallow access to management ports from 0.0.0.0/0

  # Here we pick a good icon to represent control's action. Usually the same icon as the respective policy
  # It helps quickly identifying the control on Turbot UI console
  icon: fal-shield-check

  # Control type will be placed under: `Dunder Mifflin > AWS > VPC`
  parent: "#/control/types/dmiccfAwsVpc"

  # Control will be under category hierarchy level: `Dunder Mifflin > Vpcwork Security`
  category: "dmi-ccf#/control/categories/dmiccfNet"

  # Control will run against the resource types listed bellow
  targets:
    - "tmod:@turbot/aws-vpc-security#/resource/types/securityGroup"

  # A short explanation of what this control does. Text here will be shown on Turbot UI console
  description: |
    Check Security Group disallow access from 0.0.0.0/0 to ports per `Management Ports` policy

  # Input block is where it's defined which data the control will use
  # For that, Turbot offers a query engine based on GraphQL
  # For filtering features, please check out https://turbot.com/v5/docs/reference/filter
  input: |
    {
      item: securityGroup {
        ipPermissions: get(path:"IpPermissions")
      }
      cmdbState: control(uri:"tmod:@turbot/aws-vpc-security#/control/types/securityGroupCmdb") {
        state
      }
      ccfPolicy: policy(uri: "#/policy/types/dmiccfAws")
      ccfItemPolicy: policy(uri: "#/policy/types/awsVpc001")
      managementPortsPolicy: policy(uri: "#/policy/types/awsVpc001ManagementPorts")
    }

  # This is the logic block of the Control
  # Currently pre-loaded available packages are: later, lodash, mm, moment, ocl, semver, tacl
  inline: |
    turbot.log.debug("Input:", $);

    // First of all, control needs to check whether to run or skip, based on policies dmiccfAws and awsVpc001
    if ($.ccfItemPolicy === "Skip") {
      return turbot.skipped("Policy AWS.VPC.001 is set to skip");
    }

    if ($.ccfItemPolicy === "Per Dunder Mifflin > AWS") {
      if ($.ccfPolicy === "Skip") {
        return turbot.skipped("Report level Dunder Mifflin > AWS policy set to skip");
      }

      const checkable = [
        "Check"
      ];

      if (!checkable.includes($.ccfPolicy)) {
        return turbot.skipped("Report level Dunder Mifflin > AWS check criteria not met");
      }
    }

    // Control works on data available on CMDB. So it needs to check the state of CMDB, if it's ready for use
    let state = _.get($.cmdbState, "state")
      ? _.get($.cmdbState, "state").toLowerCase()
      : _.get($.cmdbState, "state");

    if (["tbd", "skipped"].includes(state) || !state) {
      return turbot.tbd(`CMDB control is in ${state}`);
    }

    if (state != "ok") {
      turbot.log.warning(`CMDB control is in ${state}`);
    }

    let rulesWithManagementPortsOpenToTheWorld = _.filter($.item.ipPermissions, (rule) => {
      if (_.includes($.managementPortsPolicy, rule.FromPort) &&
          _.some(rule.IpRanges, {"CidrIp": "0.0.0.0/0"}) ) {
        return rule;
      }
    });

    if ( _.isEmpty(rulesWithManagementPortsOpenToTheWorld) ) {
      turbot.log.info("Details", "No rule allowing access from 0.0.0.0/0 to ports per `Management Ports` policy were found");
      return turbot.ok("Recommendation met");
    }

    turbot.log.info("Details", "Security group allows access from 0.0.0.0/0 to ports per `Management Ports` policy");
    return turbot.alarm("Recommendation not met");

# Here we define our control's unit tests
#
# To run all unit test in this control:
# turbot test --control bcAws01
#
# To run a specific unit test:
# turbot test --control bcAws01 --test "Skip if item policy is set to skip"
#
# In case you want to see debug logs, add the following arguments:
# --verbose --control-log-level debug
  tests:
    - description: Skip if item policy is set to skip
      # Here we mock the data for the input query, which will be processed by the control
      input:
        item:
          ipPermissions:
            - FromPort: 80
              IpProtocol: tcp
              IpRanges: []
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 80
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
            - FromPort: 22
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 22
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
        cmdbState:
          state: ok
        ccfPolicy: Check
        ccfItemPolicy: Skip
        managementPortsPolicy:
          - 22
          - 3389
      # Here it's defined the expected control output
      expect:
        control:
          state: skipped
          reason: Policy AWS.VPC.001 is set to skip

    - description: Return tbd if cmdb state is in tbd
      # Here we mock the data for the input query, which will be processed by the control
      input:
        item:
          ipPermissions:
            - FromPort: 80
              IpProtocol: tcp
              IpRanges: []
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 80
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
            - FromPort: 22
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 22
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
        cmdbState:
          state: tbd
        ccfPolicy: "Check"
        ccfItemPolicy: "Check"
        managementPortsPolicy:
          - 22
          - 3389
      # Here it's defined the expected control output
      expect:
        control:
          state: tbd
          reason: CMDB control is in tbd

    - description: Skip if report level policy is set to skip
      # Here we mock the data for the input query, which will be processed by the control
      input:
        item:
          ipPermissions:
            - FromPort: 80
              IpProtocol: tcp
              IpRanges: []
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 80
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
            - FromPort: 22
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 22
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
        cmdbState:
          state: ok
        ccfPolicy: "Skip"
        ccfItemPolicy: "Per Dunder Mifflin > AWS"
        managementPortsPolicy:
          - 22
          - 3389
      # Here it's defined the expected control output
      expect:
        control:
          state: skipped
          reason: Report level Dunder Mifflin > AWS policy set to skip

    - description: Returns ok if recommendation is met and the local level policy is set to check
      # Here we mock the data for the input query, which will be processed by the control
      input:
        item:
          ipPermissions:
            - FromPort: 80
              IpProtocol: tcp
              IpRanges: []
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 80
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
            - FromPort: 22
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 187.181.176.96/32
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 22
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
        cmdbState:
          state: ok
        ccfPolicy: "Skip"
        ccfItemPolicy: "Check"
        managementPortsPolicy:
          - 22
          - 3389
      # Here it's defined the expected control output
      expect:
        control:
          state: ok
          reason: Recommendation met

    - description: Returns ok if recommendation is met and Dunder Mifflin > AWS policy set to check
      # Here we mock the data for the input query, which will be processed by the control
      input:
        item:
          ipPermissions:
            - FromPort: 80
              IpProtocol: tcp
              IpRanges: []
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 80
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
            - FromPort: 22
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 187.181.176.96/32
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 22
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
        cmdbState:
          state: ok
        ccfPolicy: "Check"
        ccfItemPolicy: "Per Dunder Mifflin > AWS"
        managementPortsPolicy:
          - 22
          - 3389
      # Here it's defined the expected control output
      expect:
        control:
          state: ok
          reason: Recommendation met

    - description: Returns alarm if recommendation is not met
      # Here we mock the data for the input query, which will be processed by the control
      input:
        item:
          ipPermissions:
            - FromPort: 80
              IpProtocol: tcp
              IpRanges: []
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 80
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
            - FromPort: 22
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
              Ipv6Ranges: []
              PrefixListIds: []
              ToPort: 22
              UserIdGroupPairs:
                - GroupId: sg-993d4ffb
                  UserId: '235268162285'
        cmdbState:
          state: ok
        ccfPolicy: "Skip"
        ccfItemPolicy: "Check"
        managementPortsPolicy:
          - 22
          - 3389
      # Here it's defined the expected control output
      expect:
        control:
          state: alarm
          reason: "Recommendation not met"
