# This is a control type definition file
#
# Controls are responsible for enforcing one or more policies
# While Policies define the desired settings for Resources, Controls are responsible for implementing them
# Please refer to https://turbot.com/v5/docs/concepts/controls#control-types for details

# Here we are defining the `Dunder Mifflin > AWS > CloudTrail > AWS.CloudTrail.001 - Enable Cloudtrail in All Regions` control type
awsCloudTrail001:

  # The control's title as it will be shown on Turbot UI console
  title: AWS.CloudTrail.001 - Enable Cloudtrail in All Regions

  # Here we pick a good icon to represent control's action. Usually the same icon as the respective policy
  # It helps quickly identifying the control on Turbot UI console
  icon: fal-shield-check

  # Control type will be placed under: `Dunder Mifflin > AWS > CloudTrail`
  parent: "#/control/types/dmiccfAwsCloudTrail"

  # Control will be under category hierarchy level: `Dunder Mifflin > Logging & Auditing`
  category: "dmi-ccf#/control/categories/dmiccfAud"

  # Control will run against the resource types listed bellow
  targets:
    - "tmod:@turbot/aws#/resource/types/account"

  # A short explanation of what this control does. Text here will be shown on Turbot UI console
  description: |
    Check if there is at least one multi regional trail

  # Input block is where it's defined which data the control will use
  # For that, Turbot offers a query engine based on GraphQL
  # For filtering features, please check out https://turbot.com/v5/docs/reference/filter
  input:

    # For this control, we will need to search for any trail which is multi-regional. However, we want to check only
    # trails belonging to the AWS account where the control is running
    #
    # To achieve that, first, control needs to get the AWS account id
    # Query bellow gets the `Id` property of the `account` resource. (resource are defined at targets block)
    - |
      {
        item: resource {
          accountId: get(path:"Id")
        }
      }
    # The result of this query should look like this:
    # $.item.accountId: 235268162285
    # Note that the result root level name is the `$` character

    # Then, on the second query, control will get everything else it needs in order to run
    - |
      {
        # On the first part of the query, it will search for trails resources, belonging to a specific AWS account,
        # and which are multi-regional.
        # For this query requisites, we'll be using filters as bellow:
        #   - resourceType:'tmod:@turbot/aws-cloudtrail#/resource/types/trail' -> trail resources only
        #   - $.turbot.custom.aws.accountId:{{ $.item.accountId }} -> Resources should belong to the account as in
        #     previous query
        #   - $.IsMultiRegionTrail:'true' -> Only multi-regional trails
        # Only the total of found trails is fine for this control, so, we get metadata.stats.total of the result

        trails: resources (filter:"resourceType:'tmod:@turbot/aws-cloudtrail#/resource/types/trail'
            $.turbot.custom.aws.accountId:{{ $.item.accountId }}
            $.IsMultiRegionTrail:'true'") {
          metadata {
            stats {
              total
            }
          }
        }
        # The result of this part should look like this:
        # $.metadata.stats.total: 1

        # On the second part, it will query the CMDB control state for the target resource, as defined at targets block
        cmdbState: control(uri:"tmod:@turbot/aws#/control/types/accountCmdb") {
          state
        }
        # The result of this part should look like this:
        # $.cmdbState.state: 'ok'

        # On the third part, it will query dmiccf and awsCloudTrail001 policies
        ccfPolicy: policy(uri: "#/policy/types/dmiccfAws")
        ccfItemPolicy: policy(uri: "#/policy/types/awsCloudTrail001")
        # The result of this part should look like this:
        # $.ccfPolicy: "Check"
        # $.ccfItemPolicy: "Per Dunder Mifflin > AWS"

      }
    # The result of this query should look like this:
    # $:
    #   metadata:
    #     stats:
    #       total: 1
    #   cmdbState:
    #     state: 'ok'
    #   ccfPolicy: "Check"
    #   ccfItemPolicy: "Per Dunder Mifflin > AWS"
    #
    # Note that the result root level name is the `$` character

  # This is the logic block of the Control
  # Currently pre-loaded available packages are: later, lodash, mm, moment, ocl, semver, tacl
  inline: |
    turbot.log.debug("Input:", $);

    // First of all, control needs to check whether to run or skip, based on policies dmiccfAws and awsCloudTrail001
    if ($.ccfItemPolicy === "Skip") {
      return turbot.skipped("Policy 001 is set to skip");
    }

    if ($.ccfItemPolicy === "Per Dunder Mifflin > AWS") {
      if ($.ccfPolicy === "Skip") {
        return turbot.skipped("Report level Dunder Mifflin > AWS policy set to skip");
      }

      const checkable = [
        "Check"
      ];

      if (!checkable.includes($.ccfPolicy)) {
        return turbot.skipped("Report level Dunder Mifflin > AWS check criteria not met");
      }
    }

    // Control works on data available on CMDB. So it needs to check the state of CMDB, if it's ready for use
    let state = _.get($.cmdbState, "state")
      ? _.get($.cmdbState, "state").toLowerCase()
      : _.get($.cmdbState, "state");

    if (["tbd", "skipped"].includes(state) || !state) {
      return turbot.tbd(`CMDB control is in ${state}`);
    }

    if (state != "ok") {
      turbot.log.warning(`CMDB control is in ${state}`);
    }

    // Then here we have the control main logic
    // It will check if the input graphql query found any multi regional trail
    // If it does, then it will return an OK state
    if ( $.trails.metadata.stats.total > 0 ) {
      turbot.log.info("Details", "There is at least one multi regional trail");
      return turbot.ok("Recommendation met");
    }

    // Otherwise an Alarm state is returned
    turbot.log.info("Details", "No multi regional trail was found");
    return turbot.alarm("Recommendation not met");

# Here we define our control's unit tests
#
# To run all unit test in this control:
# turbot test --control bcAws01
#
# To run a specific unit test:
# turbot test --control bcAws01 --test "Skip if item policy is set to skip"
#
# In case you want to see debug logs, add the following arguments:
# --verbose --control-log-level debug
  tests:
    - description: Skip if item policy is set to skip
      # Here we mock the data for the input query, which will be processed by the control
      input:
        trails:
          metadata:
            stats:
              total: 1
        cmdbState:
          state: ok
        ccfPolicy: Check
        ccfItemPolicy: Skip
      # Here it's defined the expected control output
      expect:
        control:
          state: skipped
          reason: Policy 001 is set to skip

    - description: Return tbd if cmdb state is in tbd
      # Here we mock the data for the input query, which will be processed by the control
      input:
        trails:
          metadata:
            stats:
              total: 1
        cmdbState:
          state: tbd
        ccfPolicy: "Check"
        ccfItemPolicy: "Check"
      # Here it's defined the expected control output
      expect:
        control:
          state: tbd
          reason: CMDB control is in tbd

    - description: Skip if report level policy is set to skip
      # Here we mock the data for the input query, which will be processed by the control
      input:
        trails:
          metadata:
            stats:
              total: 1
        cmdbState:
          state: ok
        ccfPolicy: "Skip"
        ccfItemPolicy: "Per Dunder Mifflin > AWS"
      # Here it's defined the expected control output
      expect:
        control:
          state: skipped
          reason: Report level Dunder Mifflin > AWS policy set to skip

    - description: Returns ok if recommendation is met and the local level policy is set to check
      # Here we mock the data for the input query, which will be processed by the control
      input:
        trails:
          metadata:
            stats:
              total: 1
        cmdbState:
          state: ok
        ccfPolicy: "Skip"
        ccfItemPolicy: "Check"
      # Here it's defined the expected control output
      expect:
        control:
          state: ok
          reason: Recommendation met

    - description: Returns ok if recommendation is met and Dunder Mifflin > AWS policy set to check
      # Here we mock the data for the input query, which will be processed by the control
      input:
        trails:
          metadata:
            stats:
              total: 2
        cmdbState:
          state: ok
        ccfPolicy: "Check"
        ccfItemPolicy: "Per Dunder Mifflin > AWS"
      # Here it's defined the expected control output
      expect:
        control:
          state: ok
          reason: Recommendation met

    - description: Returns alarm if recommendation is not met
      # Here we mock the data for the input query, which will be processed by the control
      input:
        trails:
          metadata:
            stats:
              total: 0
        cmdbState:
          state: ok
        ccfPolicy: "Skip"
        ccfItemPolicy: "Check"
      # Here it's defined the expected control output
      expect:
        control:
          state: alarm
          reason: "Recommendation not met"
