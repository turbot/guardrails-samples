AWSTemplateFormatVersion: 2010-09-09

Description: TE Custom IAM Roles

Parameters:
  ResourceNamePrefix:
    Description: >
      Same with TEF
    Type: String
    Default: turbot
    MaxLength: 9
    AllowedPattern: "^[a-z][a-z0-9]*$"

  CustomResourceNamePrefix:
    Description: >
      Custom name prefix
    Type: String
    Default: acme
    MaxLength: 9
    AllowedPattern: "^[a-z][a-z0-9]*$"

  AlphaRegion:
    Description: >
      AlphaRegion
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  ApplyOverrides:
    Description: >
      Not just create the roles, but also use the roles in TEF (by creating the SSM override parameters)
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

Mappings:
  Constants:
    Portfolio:
      AccountId: "054892787221"
      GovCloudAccountId: "491412691920"

Conditions:
  IsAlpha: !Equals [!Ref AlphaRegion, true]
  CreateSsmParameters: !Equals [!Ref ApplyOverrides, true]

Resources:
  #
  # SSM
  #
  TaskExecRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/task_exec_role"
      Description: "Overrides Task Exec Role (Region)"
      Type: String
      Value: !GetAtt TaskExecRole.Arn

  TaskRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/task_role"
      Description: "Overrides Task Role (Region)"
      Type: String
      Value: !GetAtt TaskRole.Arn

  FactoryTaskExecRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/factory_task_exec_role"
      Description: "Overrides Factory Task Role (Region)"
      Type: String
      Value: !GetAtt FactoryTaskExecRole.Arn

  MaintenanceContainerRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/maintenance_container_role"
      Description: "Overrides Maintenance Container Role (Region)"
      Type: String
      Value: !GetAtt MaintenanceContainerRole.Arn

  EcsAutoscalingRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/ecs_autoscaling_role"
      Description: "Overrides ECS Autoscaling Role (Region)"
      Type: String
      Value: !GetAtt EcsAutoscalingRole.Arn

  WorkerLambdaRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/worker_lambda_role"
      Description: "Overrides Worker Lambda Role (Region)"
      Type: String
      Value: !GetAtt WorkerLambdaRole.Arn

  WorkspaceManagerExecutionRoleParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateSsmParameters
    Properties:
      Name: !Sub "/${ResourceNamePrefix}/overrides/enterprise/workspace_manager_te_execution_role"
      Description: "Overrides TE Workspace Manager Execution Role (Region). Normally this would have the version on it."
      Type: String
      Value: !GetAtt WorkspaceManagerExecutionRole.Arn

  # IAM
  TaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_ecs_task_execution_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # These policies are expansion of AmazonECSTaskExecutionRolePolicy
        - PolicyName: ECRPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRAuthorizationToken
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                # The ecr:GetAuthorizationToken action does not support resource-level permissions and All resources needs to be chosen.
                Resource: "*"
              - Sid: ECRPolicies
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:ecr:${AWS::Region}:${PortfolioAccount}:repository/*/turbot
                    - PortfolioAccount:
                        !FindInMap [Constants, Portfolio, AccountId]

        - PolicyName: CWPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRPolicies
                Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/api:log-stream:*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/maintenance:log-stream:*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/events:log-stream:*

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_ecs_task_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PassRoleWhenRunningControls
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: PassRoleWhenRunningControls
                Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:PassRole"
                Resource:
                  # this needs to work for both the old global role (that ends with _runnable) and the one that
                  # we install per region
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ResourceNamePrefix}_runnable*"

                  # TODO: how to do this? we can't refer to the output of the custom resource because we need a *
                  # unless we have a different way to do this
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${CustomResourceNamePrefix}_runnable*"

                  # we can remove when everything moved to _runnable from _lambda_runnable
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ResourceNamePrefix}_lambda_runnable"
                  - !GetAtt TaskExecRole.Arn
                  - !GetAtt FactoryTaskExecRole.Arn

        - PolicyName: RdsIamConnect
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: RdsIamConnect
                Effect: Allow
                Action:
                  - rds-db:connect
                Resource:
                  - !Sub "arn:${AWS::Partition}:rds-db:*:${AWS::AccountId}:dbuser:*/turbot"

        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3Policy
                Effect: Allow
                Action:
                  # No permission is needed to generate pre-signed URL but permission is check when that pre-signed URL
                  # is used by the Lambda function: https://forums.aws.amazon.com/thread.jspa?threadID=252897
                  - s3:GetObject
                  - s3:PutObject
                  - s3:HeadObject
                  - s3:CopyObject

                  # Unbelievable ... you need this permission to be able to do a "HeadObject" operation. Yeah ... I know, this took me
                  # hours to figure out.
                  - s3:ListBucket
                Resource:
                  # Need to be able to access the buckets in all regions not just the region where this TE is being launched
                  # This is for the bucket (mod upload failed if we don't have this resource)
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*"
                  # This is for the content of the bucket
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*/*"

        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SnsPolicy
                Effect: Allow
                Action:
                  - sns:getTopicAttributes
                  - sns:createTopic
                  - sns:setTopicAttributes
                  - sns:subscribe
                  - sns:publish
                Resource:
                  # Publish to all Runnable SNS and our own SNS topics.
                  # We need to be able to send across regions for load balancing purpose
                  - !Sub "arn:${AWS::Partition}:sns:*:${AWS::AccountId}:${ResourceNamePrefix}*"

        - PolicyName: SsmPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SsmPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  # Need to fetch parameters from all regions. Use case: dynamic bucket parameter name.
                  - !Sub "arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/${ResourceNamePrefix}/*"

        - PolicyName: SqsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SqsPolicy
                Effect: Allow
                Action:
                  - sqs:getQueueUrl
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}_*_events
                # TODO: I made this less restrictive
                # Resource: !Sub
                #   - "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}_${SafeVersion}_events"
                #   - SafeVersion:
                #       !Join ["_", !Split [".", !Join ["_", !Split ["-", !FindInMap [Constants, Product, Version]]]]]

        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AuditLogsPolicy
                Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/api/audit:log-stream:*

        - PolicyName: Allow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowKmsToAll
                Effect: Allow
                Action:
                  - kms:generateDataKey
                  - kms:encrypt
                  - kms:decrypt
                Resource: !Sub "arn:${AWS::Partition}:kms:*:${AWS::AccountId}:*"
              - Sid: StsPolicyToAll
                Effect: Allow
                Action:
                  - sts:assumeRole
                Resource: "*"

  FactoryTaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_factory_task_execution_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # These policies are expansion of AmazonECSTaskExecutionRolePolicy
        - PolicyName: ECRPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRPolicies
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - "*"
        - PolicyName: CWPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRPolicies
                Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/control:log-stream:*

  MaintenanceContainerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_maintenance_container_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3Policy
                Effect: Allow
                Action:
                  # No permission is needed to generate pre-signed URL but permission is check when that pre-signed URL
                  # is used by the Lambda function: https://forums.aws.amazon.com/thread.jspa?threadID=252897
                  - s3:GetObject
                  - s3:PutObject
                  - s3:HeadObject
                  - s3:CopyObject
                  - s3:DeleteObject

                  # Unbelievable ... you need this permission to be able to do a "HeadObject" operation. Yeah ... I know, this took me
                  # hours to figure out.
                  - s3:ListBucket
                Resource:
                  # Need to be able to access the buckets in all regions not just the region where this TE is being launched
                  # This is for the bucket (mod upload failed if we don't have this resource)
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*"
                  # This is for the content of the bucket
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*/*"

        - PolicyName: SsmPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SsmPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource:
                  # Need to fetch parameters from all regions. Use case: dynamic bucket parameter name.
                  - !Sub "arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/${ResourceNamePrefix}/*"

        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ListFunctionsActions
                Effect: Allow
                Action:
                  - lambda:ListFunctions
                Resource: "*"
              - Sid: OtherActions
                Effect: Allow
                Action:
                  - lambda:ListVersionsByFunction
                  - lambda:ListAliases
                  - lambda:DeleteFunction
                Resource:
                  # Need to fetch parameters from all regions. Use case: dynamic bucket parameter name.
                  - !Sub "arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:${ResourceNamePrefix}*"

        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AuditLogsPolicy
                Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/maintenance:log-stream:*

        - PolicyName: Allow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowKmsToAll
                Effect: Allow
                Action:
                  - kms:generateDataKey
                  - kms:encrypt
                  - kms:decrypt
                Resource: !Sub "arn:${AWS::Partition}:kms:*:${AWS::AccountId}:*"
              - Sid: StsPolicyToAll
                Effect: Allow
                Action:
                  - sts:assumeRole
                Resource: "*"

  EcsAutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_ecs_autoscale_role_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  WorkerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_worker_lambda_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Do we audit trail need it for WorkerLambda?
              - Sid: AuditLogsPolicy
                Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${ResourceNamePrefix}/*/api/audit:log-stream:*
              - Sid: WorkerLambdaLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}_*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}_*:log-stream:*

        - PolicyName: PassRoleWhenRunningControls
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: PassRoleWhenRunningControls
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*runnable*"

                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ResourceNamePrefix}_runnable*"

                  # TODO: how to do this? we can't refer to the output of the custom resource because we need a *
                  # unless we have a different way to do this
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${CustomResourceNamePrefix}_runnable*"

                  # we can remove when everything moved to _runnable from _lambda_runnable
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ResourceNamePrefix}_lambda_runnable"
                  - !GetAtt TaskExecRole.Arn
                  - !GetAtt FactoryTaskExecRole.Arn

        - PolicyName: RdsIamConnect
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: RdsIamConnect
                Effect: Allow
                Action:
                  - rds-db:connect
                Resource:
                  - !Sub "arn:${AWS::Partition}:rds-db:*:${AWS::AccountId}:dbuser:*/turbot"

        - PolicyName: LambdaManagementWorkerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LambdaManagementWorkerPolicy
                Effect: Allow
                Action:
                  - lambda:get*
                  - lambda:updateFunctionConfiguration
                  - lambda:updateFunctionCode
                  - lambda:createFunction
                  - lambda:createAlias
                  - lambda:updateAlias
                  - lambda:addPermission
                  - lambda:deleteFunction
                  - lambda:listTags
                  - lambda:tagResource
                Resource:
                  # Need to be able to create Lambda in all regions
                  - !Sub arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:${ResourceNamePrefix}*

        - PolicyName: SsmPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SsmPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  # Need to ready the dynamic bucket name parameter from all regions
                  - !Sub "arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/${ResourceNamePrefix}/*"

        - PolicyName: SqsLambdaTriggerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SqsToLambdaRole
                Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  # TODO: I made this less specific
                  # - !GetAtt EventsQueue.Arn
                  # - !GetAtt EventsRetryQueue.Arn
                  # - !GetAtt EventsDeadLetterQueue.Arn
                  # - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}_lambda_runnable_dlq"
                  # - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}_runnable_dlq"
                  - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}*"

        - PolicyName: SqsLambdaSendToRetryAndDlqPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SqsToLambdaRole
                Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:changeMessageVisibility
                Resource:
                  # TODO: I made this less specific
                  # - !GetAtt EventsRetryQueue.Arn
                  - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}*"

        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SnsPolicy
                Effect: Allow
                Action:
                  - sns:getTopicAttributes
                  - sns:createTopic
                  - sns:setTopicAttributes
                  - sns:subscribe
                  - sns:publish
                  - sns:tagResource
                Resource:
                  # Publish to all Runnable SNS and our own SNS topics.
                  # We need to be able to send across regions for load balancing purpose
                  - !Sub "arn:${AWS::Partition}:sns:*:${AWS::AccountId}:${ResourceNamePrefix}*"

        - PolicyName: EcsWorkerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: EcsWorkerService
                Effect: Allow
                Action:
                  - ecs:describeServices
                Resource:
                  # TODO: I had to simplify this
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/${ResourceNamePrefix}/${ResourceNamePrefix}_*
                  # - !Sub
                  #   - "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/${ResourceNamePrefix}/${ResourceNamePrefix}_${SafeVersion}*"
                  #   - SafeVersion:
                  #       !Join ["_", !Split [".", !Join ["_", !Split ["-", !FindInMap [Constants, Product, Version]]]]]
              - Sid: EcsWorkerTask
                Effect: Allow
                Action:
                  - ecs:runTask
                Resource:
                  # TODO: I had to simplify this
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${ResourceNamePrefix}_*
                  # - !Sub
                  #   - "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${ResourceNamePrefix}_${SafeVersion}*"
                  #   - ResourceNamePrefix: !Ref ResourceNamePrefix
                  #     SafeVersion:
                  #       !Join ["_", !Split [".", !Join ["_", !Split ["-", !FindInMap [Constants, Product, Version]]]]]

        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3Policy
                Effect: Allow
                Action:
                  # No permission is needed to generate pre-signed URL but permission is check when that pre-signed URL
                  # is used by the Lambda function: https://forums.aws.amazon.com/thread.jspa?threadID=252897
                  - s3:GetObject
                  - s3:PutObject
                  - s3:HeadObject
                  - s3:CopyObject
                  - s3:ListBucketVersions
                  - s3:DeleteObject*
                  # Unbelievable ... you need this permission to be able to do a "HeadObject" operation. Yeah ... I know, this took me
                  # hours to figure out.
                  - s3:ListBucket
                Resource:
                  # Need to be able to access the buckets in all regions not just the region where this TE is being launched
                  # This is for the bucket (mod upload failed if we don't have this resource)
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*"

                  # This is for the content of the bucket
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*/*"

        - PolicyName: EC2Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowEc2
                Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource:
                  - "*"

        - PolicyName: WorkerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowKmsToAll
                Effect: Allow
                Action:
                  - kms:generateDataKey
                  - kms:encrypt
                  - kms:decrypt
                Resource: !Sub "arn:${AWS::Partition}:kms:*:${AWS::AccountId}:*"
              - Sid: AllowEc2ToAll
                Effect: Allow
                Action:
                  # https://forum.serverless.com/t/very-long-delay-when-doing-sls-remove-of-lambda-in-a-vpc/2535/2
                  # https://stackoverflow.com/questions/35990747/lambda-creating-eni-everytime-it-is-invoked-hitting-limit
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
              - Sid: AllowServicesToAll
                Effect: Allow
                Action:
                  - sts:assumeRole
                Resource: "*"

  WorkspaceManagerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${CustomResourceNamePrefix}_workspace_manager_te_${Region}"
        - Region: !Join ["_", !Split ["-", !Ref "AWS::Region"]]
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: WorkspaceManagerRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: RdsIamConnect
                Effect: Allow
                Action:
                  - rds-db:connect
                Resource:
                  - !Sub "arn:${AWS::Partition}:rds-db:*:${AWS::AccountId}:dbuser:*/turbot"

              - Sid: LambdaPolicy
                Effect: Allow
                Action:
                  - lambda:listTags
                Resource:
                  # Need to be able to create Lambda in all regions
                  - !Sub arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:${ResourceNamePrefix}*

              - Sid: SsmPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:AddTagsToResource
                Resource:
                  # Workspace Manager manages parameters for multiple regions
                  - !Sub "arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/${ResourceNamePrefix}/*"

              - Sid: S3Policy
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  # Needed to get other Turbot Workspace versions so we know how to downgrade
                  - !Sub "arn:${AWS::Partition}:s3:::turbot-software-*/te/*"

              - Sid: S3PolicyLogBucket
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${ResourceNamePrefix}-${AWS::AccountId}*/temp/*"

              - Sid: AllowEc2ToAll
                Effect: Allow
                Action:
                  # https://forum.serverless.com/t/very-long-delay-when-doing-sls-remove-of-lambda-in-a-vpc/2535/2
                  # https://stackoverflow.com/questions/35990747/lambda-creating-eni-everytime-it-is-invoked-hitting-limit
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

              - Sid: LogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}_*_workspace_manager:log-stream:*
                  # TODO: I made this less restrictive
                  # - arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceNamePrefix}_${SafeVersion}_workspace_manager:log-stream:*
                  # - SafeVersion:
                  #     !Join ["_", !Split [".", !Join ["_", !Split ["-", !FindInMap [Constants, Product, Version]]]]]

              - Sid: KmsPolicy
                Effect: Allow
                Action:
                  - kms:generateDataKey
                  - kms:encrypt
                  - kms:decrypt
                Resource: !Sub "arn:${AWS::Partition}:kms:*:${AWS::AccountId}:*"
