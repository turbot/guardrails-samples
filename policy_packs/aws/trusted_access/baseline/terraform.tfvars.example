## Modify this list to change the enforcement type ["skip", "check" or "enforce"] (Case sensitive)
## Comment out any policies type where you do not want the stack to create the policy settings.
trusted_access_controls = {
  ec2-ami                     = "check"
  ec2-snapshot                = "check"
  rds-clusterSnapshot         = "check"
  rds-dbSnaphot               = "check"
  redshift-snapshot           = "check"
  secretsmanager-secretPolicy = "check"
  glacier-vaultPolicy         = "check"
  iam-rolePolicy              = "check"
  lambda-functionPolicy       = "check"
  lambda-versionPolicy        = "check"
  s3-bucketPolicy             = "check"
  sns-topicPolicy             = "check"
  sqs-queuePolicy             = "check"
  vpc-endpointPolicy          = "check"
}

## Do not modify the policy_map. These are static reference values that do not change
policy_map = {
  ec2-ami = {
    service      = "aws-ec2"
    resourceName = "ami"
    acctPolicy   = "TrustedAccessAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access > Accounts"
    enforce      = "Enforce: Trusted Access > Accounts"
  }
  ec2-snapshot = {
    service      = "aws-ec2"
    resourceName = "snapshot"
    acctPolicy   = "TrustedAccessAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access > Accounts"
    enforce      = "Enforce: Trusted Access > Accounts"
  }
  rds-clusterSnapshot = {
    service      = "aws-rds"
    resourceName = "dbClusterSnapshotManual"
    acctPolicy   = "TrustedAccessAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access > Accounts"
    enforce      = "Enforce: Trusted Access > Accounts"
  }
  rds-dbSnaphot = {
    service      = "aws-rds"
    resourceName = "dbSnapshotManual"
    acctPolicy   = "TrustedAccessAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access > Accounts"
    enforce      = "Enforce: Trusted Access > Accounts"
  }
  redshift-snapshot = {
    service      = "aws-redshift"
    resourceName = "clusterSnapshotManual"
    acctPolicy   = "TrustedAccessAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access > Accounts"
    enforce      = "Enforce: Trusted Access > Accounts"
  }
  secretsmanager-secretPolicy = {
    service      = "aws-secretsmanager"
    resourceName = "secretPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  glacier-vaultPolicy = {
    service      = "aws-glacier"
    resourceName = "vaultPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  iam-rolePolicy = {
    service      = "aws-iam"
    resourceName = "rolePolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  lambda-functionPolicy = {
    service      = "aws-lambda"
    resourceName = "functionPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  lambda-versionPolicy = {
    service      = "aws-lambda"
    resourceName = "functionVersionPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  s3-bucketPolicy = {
    service      = "aws-s3"
    resourceName = "bucketPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  sns-topicPolicy = {
    service      = "aws-sns"
    resourceName = "topicPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  sqs-queuePolicy = {
    service      = "aws-sqs"
    resourceName = "queuePolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
  vpc-endpointPolicy = {
    service      = "aws-vpc-internet"
    resourceName = "vpcEndpointPolicy"
    acctPolicy   = "TrustedAccounts"
    skip         = "Skip"
    check        = "Check: Trusted Access"
    enforce      = "Enforce: Revoke untrusted access"
  }
}

# Configuration for trusted access exceptions
trusted_access_exceptions = {
  # Baseline trusted account IDs that apply to all accounts
  baseline = [
    "123456789012"  # Example Account 1
  ]
  
  # Account-specific trusted access configurations
  accounts = {
    "111122223333" = [  # Example AWS Account
      "123456789012",   # Example Account 1
      "345678901234"    # Example Account 3 (only trusted for this account)
    ]
  }
}