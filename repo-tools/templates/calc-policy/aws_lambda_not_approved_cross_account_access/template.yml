resource: AWS Lambda
description: Alarm if function policy has cross-account access
policies:
  - AWS > Lambda > Function > Approved
  - AWS > Lambda > Function > Approved > Usage
useCase: |
  The business owner of the AWS platform wants to use Lambda within the environment but would like to get alarms if a
  function policy has cross-account access.
details: |
  If a function policy has cross-account access then the approved usage policy will be set to `Not approved` otherwise
  it will be set to `Approved`.
templateInput:
  details: |
    GraphQL query that will check if a function policy has cross-account access.
    If the query returns an array of zero items, then there are no function with cross-account access.
  query: |
    {
      resource {
        iamPolicies: get(path: "IamPolicy.Policy.Statement")
        turbot {
          custom
        }
      }
    }
template:
  details: |
    Approval logic for Lambda Function cross-account access.
    If no external account is found in Principal.AWS, Condition.'AWS:SourceAccount' or Condition.'AWS:SourceArn'
    then there are no cross-account access
  source: |
    {% set has_cross_account = false -%}
    {% for iamPolicy in $.resource.iamPolicies -%}
    {%   if iamPolicy.Principal.AWS and iamPolicy.Principal.AWS.split(':')[4] != $.resource.turbot.custom.aws.accountId -%}
    {%     set has_cross_account = true -%}
    {%   endif -%}
    {%   if iamPolicy.Condition.StringEquals['AWS:SourceAccount'] and iamPolicy.Condition.StringEquals['AWS:SourceAccount'] != $.resource.turbot.custom.aws.accountId -%}
    {%     set has_cross_account = true -%}
    {%   endif -%}
    {%   if iamPolicy.Condition.ArnLike['AWS:SourceArn'] and iamPolicy.Condition.ArnLike['AWS:SourceArn'].split(':')[4] != $.resource.turbot.custom.aws.accountId -%}
    {%     set has_cross_account = true -%}
    {%   endif -%}
    {% endfor -%}
    {% if has_cross_account -%}
        "Not approved"
    {%- else -%}
        "Approved"
    {%- endif -%}
