resource: AWS S3 Bucket
description: Restrict ACL Cross Account Access by user defined Whitelist
policies:
  - AWS > Region > Bucket > Approved
  - AWS > Region > Bucket > Approved > Usage
useCase: |
  Bucket set to `Not approved` if ACL cross-account access exists to an account not in a whitelist.
details: |
  If the account that the access is shared with through ACL, given by the property `Acl.Grants[].Grantee.ID`
  is not whitelisted, then the policy will be set to `Not approved` otherwise it will be set to `Approved`.
templateInput:
  details: |
    GraphQL query that will return all the ACL cross-account access rules to compare against an account whitelist
    to ensure that the entry is valid.
  query: |
    {
      resource {
        onwerId: get(path:"Acl.Owner.ID")
        aclGrants: get(path:"Acl.Grants")
      }
    }
template:
  details: |
    Add items to the currently empty `whitelist` collection as detailed in inline example comments.
    The Nunjucks script will then check if all the accounts in the Bucket ACL are valid by comparing
    entries from a whitelist of accounts.
    To add entries to the whitelist can be done in two different ways:

    - Using `defaults.tf`
    - Amending the list in Turbot UI

    #### Using `defaults.tf`

    **Recommended**
    Add the entries into the file as a list of accounts.
    When running the script it will add these entries into the Calculated Policy automatically and allow the end
    user to control the accounts centrally.

    #### Amending the list in Turbot UI

    If the company workflow is to modify the Calculated Policy directly in Turbot.
    Navigate to the policy and amend the template value by adding entries into the `approvedAccounts` Nunjucks array.
    For example, suppose two accounts should be added,
    "14dc98d5f2185f3d62afcc95361dd156098a788f09fdd581d68710b503cfad09", and
    "49b5a5892783e49a3bd87044a68205269838794f589eaa65a5376d281f839527", this can be added by setting the variable by:

    ```nunjucks
    {#- set approvedAccounts = ["14dc98d5f2185f3d62afcc95361dd156098a788f09fdd581d68710b503cfad09",
              "49b5a5892783e49a3bd87044a68205269838794f589eaa65a5376d281f839527"] -#}
    ```

    **Notes:**
    1. All the accounts in Bucket ACL need to have an entry in the whitelist variable named `approvedAccounts`
    in order for the Bucket to be valid, otherwise it will be invalid and set to `Not approved`.
    2. AWS Account should be in `Canonical user ID` form. Read more about it here:
      https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html
  source: |
    {#- Whitelist of accounts that are approved for access through ACL in Canonical user ID form -#}
    {#- Read more about Canonical user IDs: https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html -#}
    {%- set approvedAccounts = ["${join("\",\n      \"", var.approved_accounts)}"] -%}
    {%- set hasUnapprovedAccount = false -%}

    {%- for aclGrant in $.resource.aclGrants -%}
      {%- if aclGrant.Grantee.Type == "CanonicalUser" and aclGrant.Grantee.ID != $.resource.onwerId and aclGrant.Grantee.ID not in approvedAccounts -%}
        {%- set hasUnapprovedAccount = true -%}
      {%- endif -%}
    {%- endfor -%}

    {%- if not hasUnapprovedAccount -%}
      "Approved"
    {%- else -%}
      "Not approved"
    {%- endif -%}
