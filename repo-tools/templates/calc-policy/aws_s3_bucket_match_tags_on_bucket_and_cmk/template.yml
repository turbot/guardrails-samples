resource: AWS S3
description: Match tags on Bucket and corresponding CMK
policies:
  - AWS > S3 > Bucket > Encryption at Rest
  - AWS > S3 > Bucket > Encryption at Rest > Customer Managed Key
useCase: |
  The business owner may have different classifications of data (PII, Health, Proprietary, etc) where,
  S3 buckets are designated to hold specific classes of data. For each classification, a corresponding
  Customer Managed Key should exist.
  To ensure that the right CMK is attached to the right bucket, a comparison needs to be made between the tags
  on the bucket and on CMK.
details: |
  The policy execute queries to get the bucket's tags and the corresponding CMK's tags
  A comparison is then made between the bucket's tags, and the tags on the KMS key.
  If they match, the bucket is approved, else the bucket is unapproved.
  In case the bucket is not encrypted with KMS, then it is unapproved.
  Depending on the value set in `AWS > S3 > Bucket > Encryption at Rest`, customer may choose to raise an alarm or
  remediate the KMS attached to the bucket.
templateInput:
  details: |
    In the fist query, policy gets the encryption rules for the bucket where may contain the KMS Arn
    In the second query, policy uses Numjucks to iterate over encryption rules searching for the KMS Arn
    If it finds, then it will get current bucket tags and the corresponding MKS key tags by KMS Arn,
    otherwise it will only get current bucket tags
  query: |
    - |
      {
        item: resource {
          encryptionRules: get(path: "Encryption.ServerSideEncryptionConfiguration.Rules")
        }
      }
    - |
      {%- set encryptionRule = {} -%}
      {%- for rule in $.item.encryptionRules -%}
        {%- if rule.ApplyServerSideEncryptionByDefault -%}
          {%- set encryptionRule = rule -%}
        {%- endif -%}
      {%- endfor -%}
      {
        bucket: resource {
          tags
        }
        {%- if encryptionRule.ApplyServerSideEncryptionByDefault.KMSMasterKeyID -%}
        kmsKey: resource (id: "{{ encryptionRule.ApplyServerSideEncryptionByDefault.KMSMasterKeyID }}") {
          tags
        }
        {%- endif -%}
      }
template:
  details: |
    Checks if KMS key exists and contains the desired tag (set on [default.tfvars](default.tfvars) `cross_resource_tag_key`)
    Checks if bucket contains the desired tag (set on [default.tfvars](default.tfvars) `cross_resource_tag_key`)
    Checks if the value of both KMS key `cross_resource_tag_key` tag and Bucket matches
    If it does match, then policy is set to `Approved`
    Any other case it is set to `Not approved`
  source: |
    {%- if $.kmsKey.tags['${var.cross_resource_tag_key}']
      and $.bucket.tags['${var.cross_resource_tag_key}']
      and $.kmsKey.tags['${var.cross_resource_tag_key}'] == $.bucket.tags['${var.cross_resource_tag_key}'] -%}
      Approved
    {%- else -%}
      Not approved
    {%- endif -%}
