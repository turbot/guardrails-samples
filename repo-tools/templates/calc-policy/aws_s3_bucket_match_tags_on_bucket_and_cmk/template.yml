resource: AWS S3
description: Match tags on Bucket and corresponding Key Management Service.
policies:
  - AWS > S3 > Bucket > Encryption at Rest
  - AWS > S3 > Bucket > Encryption at Rest > Customer Managed Key
useCase: |
  The business owner may have different classifications of data (PII, Health, Proprietary, etc) where, S3 Buckets are 
  designated to hold specific classes of data. 
  For each classification, a corresponding Customer Managed Key should exist.
  A comparison needs to be made between the tags on the S3 Bucket and on that on the Key Management Service to ensure
  that the right Key Management Service is attached to the right S3 Bucket.
details: |
  The policy execute queries to get the S3 Bucket's tags and the corresponding Key Management Service's tags.
  A comparison is then made between the tags.
  If they match, the S3 Bucket is `Approved` otherwise `Not approved`.
  Depending on the value set in `AWS > S3 > Bucket > Encryption at Rest`, a customer may choose to raise an alarm or
  remediate the Key Management Service attached to the S3 Bucket.
templateInput:
  details: |
    In the fist query gets the encryption rules for the S3 Bucket.
    In the second query, policy uses Nunjucks to iterate over encryption rules searching for the Key Management Service 
    ARN.
    If a match is found, the script will then then query will get the tags for the Key Management Service's tags which 
    will later be used to compare against the S3 Bucket tags.
  query: |
    - |
      {
        item: resource {
          encryptionRules: get(path: "Encryption.ServerSideEncryptionConfiguration.Rules")
        }
      }
    - |
      {%- set encryptionRule = {} -%}
      {%- for rule in $.item.encryptionRules -%}
        {%- if rule.ApplyServerSideEncryptionByDefault -%}
          {%- set encryptionRule = rule -%}
        {%- endif -%}
      {%- endfor -%}
      {
        S3 Bucket: resource {
          tags
        }
        {%- if encryptionRule.ApplyServerSideEncryptionByDefault.KMSMasterKeyID -%}
        kmsKey: resource (id: "{{ encryptionRule.ApplyServerSideEncryptionByDefault.KMSMasterKeyID }}") {
          tags
        }
        {%- endif -%}
      }
template:
  details: |
    Checks if Key Management Service key exists and contains the desired tag (set using [default.tfvars](default.tfvars)
    variable  `cross_resource_tag_key`.
    Checks if S3 Bucket contains the desired tag (set using [default.tfvars](default.tfvars) `cross_resource_tag_key`.
    Finally the script will check if the tags match.
    If it does match, then policy is set to `Approved` otherwise the policy value will be set to `Not approved`
  source: |
    {%- if $.kmsKey.tags['${var.cross_resource_tag_key}']
      and $.S3 Bucket.tags['${var.cross_resource_tag_key}']
      and $.kmsKey.tags['${var.cross_resource_tag_key}'] == $.S3 Bucket.tags['${var.cross_resource_tag_key}'] -%}
      Approved
    {%- else -%}
      Not approved
    {%- endif -%}
