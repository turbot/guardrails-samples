title: AWS S3 - Set default tags on buckets with dynamic metadata
useCase: |
  The business owner of the AWS platform wants to consistently tag all resources with business metadata to meet company
  standards and ensure supportability and cost transparency.
details: |
  Provides a Terraform configuration for creating a smart folder and applying a calculated policy on the 
  `AWS> S3> Bucket> Tags> Template`.
  The Calculated policy creates a tag template.
  The template shows creating static and dynamic values.
  It also shows how to control the values of tags on a bucket.
templateInput:
  details: |
    In this case the query selects various metadata about the bucket.
  query: |
    {
      account {
        Id
      }
      folder {
        turbot {
          tags
        }
      }
      bucket {
        Name
        turbot {
          tags
        }
        creator: history(filter: "sort:version_id limit:1") {
          items {
            actor {
              identity {
                turbot {
                  title
                }
              }
            }
            turbot {
              createTimestamp
            }
          }
        }
      }
    }
template:
  source: |
    {# Use tags from folder level #}
    "Cost Center": "{{ $.folder.turbot.tags.Cost_Center }}"

    {# Static Name Example #}
    "Company": "Acme Inc."

    {# Use AWS environment metadata / attributes #}
    "Billing Account Detail": "AF-{{ $.account.Id }}"
    "Bucket Name": "{{ $.bucket.Name }}"

    {# Allow any value except null, set to "Non-Compliant" if out of bounds #}
    "Description": "{% if $.bucket.turbot.tags['Description'] %}{{ $.bucket.turbot.tags['Description'] }}{% else %}Non-Compliant Tag{% endif %}"

    {# Enforce selection of values, set to "Non-Compliant" if out of bounds #}
    "Environment": "{% if $.bucket.turbot.tags['Environment'] in ['Dev', 'QA', 'Prod', 'Temp'] %}{{ $.bucket.turbot.tags['Environment'] }}{% else %}Non-Compliant Tag{% endif %}"

    {# Actor who created the bucket #}
    "CreatedByActor": "{{ $.bucket.creator.items[0].actor.identity.turbot.title }}"

    {# Creation Timestamp #}
    "CreatedByTime": "{{ $.bucket.creator.items[0].turbot.createTimestamp }}"
